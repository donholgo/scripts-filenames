#!/usr/bin/perl

use strict;
use warnings;
use File::Basename;
use Getopt::Long;
use POSIX qw(strftime);

my $format = '%Y%m%d_%H%M%S';
my $separator = '.';
my $replace = 0;
my $help = 0;

my $basename = basename $0;
my $usage = <<EOF;
Usage:
  $basename [options] file ...

Prepend file names with the files' formatted mtimes.

Options:
-format STRFTIME-FORMAT
  Use STRFTIME-FORMAT to format the timestamp. '%n' can
  be used in the format string to refer to the file's
  basename without extension.
  (default: '$format')

-date
  Abbreviation for '-format %Y%m%d'.

-replace
  Instead of just prepending the timestamp, replace the
  entire basename (except the extension) with it.

-separator SEPARATOR
  Use separator SEPARATOR between timestamp and basename.
  (default: '$separator')
 
-test
  Dry run: only print old/new names, do not rename files.

-help, -?
  Print usage and exit.
EOF


my $test;
GetOptions(
  "date" => sub { $format = '%Y%m%d'; },
  "format=s" => \$format,
  "replace" => \$replace,
  "separator=s" => \$separator,
  "test" => \$test,
  "help|?" => \$help,
);

die $usage unless @ARGV;
if ($help) {
  print $usage;
  exit 0;
}


foreach (@ARGV) {
  next unless -f;
  my $mtime = (stat)[9];
  my $old = $_;

  my $f = $format;
  my $dir = "";
  if (m-^(.*/)(.*)$-) {
    $dir = $1;
    $_ = $2;
  }
  my $base = $_;
  my $ext = "";
  if (/(.*)(\..*)$/) {
    $base = $1;
    $ext = $2;
  }
  if ($f =~ /%n/) {
    (my $aux = $base) =~ s/%/%%/g;
    $f =~ s/%n/$aux/g;
  }
  my $formatted = strftime($f, localtime($mtime));
  my $newbase = $base;
  if ($replace) {
    $newbase = $formatted;
  } else {
    if (rindex $base, $formatted.$separator, 0 != 0) {
      $newbase = $formatted.$separator.$base;
    }
  }
  my $new = $dir.$newbase.$ext;
  if ($new ne $_) {
    print "$_ -> $new\n";
    unless ($test) {
      if (-e $new) {
	warn "Not renaming $_ to $new (file exists)!\n";
      } else {
	rename $_, $new or warn "can't rename: $!\n";
      }
    }
  }
}
